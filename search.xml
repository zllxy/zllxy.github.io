<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GoLang中的浮点型</title>
      <link href="2020/11/28/goland-float/"/>
      <url>2020/11/28/goland-float/</url>
      
        <content type="html"><![CDATA[<h2 id="GoLang浮点数"><a href="#GoLang浮点数" class="headerlink" title="GoLang浮点数"></a>GoLang浮点数</h2><ul><li><p>Go语言中主要有两个类型来表示浮点数：</p><p>  <code>float32</code>，单精度浮点数，可以精确到小数点后 7 位<br>  <code>float64</code>，双精度浮点数，可以精确到小数点后 15 位</p></li><li><p>在代码中使用：</p><p>  通过<code>var</code>关键字直接声明</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> f <span class="token builtin">float32</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  通过变量自动推导，其类型将被自动设置为 <code>float64</code>。实际开发中，尽量使用<code>float64</code>，因为Go语言很多函数的参数要求传入这个类型，比如<code>math</code>中有关数学运算的函数。</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">f1 <span class="token operator">:=</span> <span class="token number">1.0</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%T"</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//float64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>float32</code> 与 <code>float64</code> 相互转换</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> f <span class="token builtin">float32</span><span class="token keyword">var</span> f1 <span class="token builtin">float64</span>f <span class="token operator">=</span> <span class="token number">10.01</span>f1 <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  ​    </p></li></ul><h2 id="浮点数之间的比较"><a href="#浮点数之间的比较" class="headerlink" title="浮点数之间的比较"></a>浮点数之间的比较</h2><ul><li><p>由于计算机底层将十进制的浮点数转化为二进制表示时，会丢失精度，所以不要认为浮点数可以精确到了最后一位，也不要比较两个浮点数是否相等，比如：</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">f1 <span class="token operator">:=</span> <span class="token number">0.1</span>f2 <span class="token operator">:=</span> <span class="token number">0.7</span>f3 <span class="token operator">:=</span> f1 <span class="token operator">+</span> f2fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f3 <span class="token operator">==</span> <span class="token number">0.8</span><span class="token punctuation">)</span>   <span class="token comment">//false</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span>     <span class="token comment">//0.7999999999999999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>如果一定要比较两个浮点数是否相等，通常可以设置一个最小误差值 <code>p</code>，如果两个浮点数的差值在此精度的误差范围之内，则判定这两个浮点数相等。借助 <code>math.Dim</code> 可以实现</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">p <span class="token operator">:=</span> <span class="token number">0.0001</span><span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">Dim</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> p <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"f1 和 f2 相等"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub Pages搭建个人网站</title>
      <link href="2020/11/27/hello-world/"/>
      <url>2020/11/27/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要搭建个人网站"><a href="#为什么要搭建个人网站" class="headerlink" title="为什么要搭建个人网站"></a>为什么要搭建个人网站</h2><ul><li><p>记录自己学习过的知识点，加深对知识点的理解</p><p>每当学习完一个新的知识点，总以为自己已经完全掌握。但是过了一段时间发现，对之前学的东西印象很模糊。尤其当和别人探讨到这个知识点的时候，才发现自己只是掌握了一个皮毛。通过记笔记的方式，可以把自己学过的知识点转换成自己的理解讲清楚。如果能把一个问题将清楚，说明自己已经对这个问题掌握的十之八九了。</p></li><li><p>锻炼自己的语言组织能力</p><p>其实写一篇笔记，并不容易，每一句都要经过仔细思考，反复的修改，直到能够明确的表达出自己的想法。每写出一篇能够明确表达自己想法的笔记，都是对自己的表达能力的提升</p></li><li><p>可以随时记录解决问题的经历</p><p>每当解决一个问题的时候，心里还是很有成就感的。在解决问题之后，总结解决问题过程中遇到的难点。把自己如何攻克这些难点，以及解决问题的思路记录下来，那么以后遇到类似的问题就会有一个清晰的思路，对解决问题的效率会有很大的提高</p></li></ul><h2 id="如何搭建个人网站"><a href="#如何搭建个人网站" class="headerlink" title="如何搭建个人网站"></a>如何搭建个人网站</h2><ul><li><p>前提条件：安装Hexo，并且拥有一个GitHub账号</p><p>  安装Hexo具体教程，请查看<a href="https://hexo.io/zh-cn/docs/index.html">Hexo文档</a>,如何注册GitHub账号，网上有很多教程，这里就不详细介绍了</p></li><li><p>选择一个自己喜欢的Hexo主题</p><p>  本站选用的是 <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly主题</a>，下面推荐几种获取主题方式：</p><ol><li><p><a href="https://hexo.io/themes/">官方主题网站</a></p></li><li><p><a href="https://github.com/">GitHub</a> 上搜索Hexo关键词</p></li><li><p>通过百度搜索</p></li></ol></li><li><p>部署个人网站</p><ol><li><p>在GitHub上创建一个项目，项目名必须是： 用户名.github.io</p></li><li><p>在GitHub中添加公钥，方便上传博客代码，运行下面命令生成秘钥，全部选择默认，我使用的是Windows Terminal</p> <pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;your email@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>复制生成的公钥</p> <pre class="line-numbers language-none"><code class="language-none">clip &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>然后在GitHub个人设置中选择SSH and GPG keys，点击new SSH key,将复制的公钥粘贴到图中key，title可以随便填，然后点击Add SSH key保存<br><img src= "https://cdn.jsdelivr.net/gh/zllxy/CDN@main/notes/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zllxy/gallery/zllxy-notes/a01/01.png"></p></li><li><p>测试是否配置成功</p> <pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果显示以下信息，说明配置成功</p> <pre class="line-numbers language-none"><code class="language-none">Hi XXX! You&#39;ve successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装并配置git个人信息，git安装教程在 <a href="https://hexo.io/zh-cn/docs/index.html">Hexo文档</a> 中已有介绍，下面是配置个人信息的命令</p> <pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;建议填写GitHub用户名&quot;git config --global user.email &quot;建议填写GitHub邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改Hexo配置文件_config.yml中的deploy选项</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> 填写之前创建的GitHub项目的仓库地址  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>确保已经安装 hexo-deployer-git</p> <pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>部署到 GitHub</p><pre class="line-numbers language-none"><code class="language-none">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>访问博客<br>浏览器访问 https:// GitHub用户.github.io</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> BLOG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
